// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`[ChallengeVideo] Test ChallengeVideo snapshot 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    Array [
      Object {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    flex={1}
    style={
      Array [
        Object {
          "flexBasis": 0,
          "flexGrow": 1,
          "flexShrink": 1,
        },
      ]
    }
  >
    <View
      mb={22.15421115065243}
      pt={2}
      style={
        Array [
          Object {
            "marginBottom": 22.15421115065243,
            "paddingTop": 8,
          },
        ]
      }
    >
      <BVLinearGradient
        colors={
          Array [
            4279234493,
            9763859,
          ]
        }
        endPoint={
          Object {
            "x": 0.5,
            "y": 1,
          }
        }
        locations={null}
        startPoint={
          Object {
            "x": 0.5,
            "y": 0,
          }
        }
        style={
          Object {
            "backgroundColor": "transparent",
            "flex": 1,
            "height": 240.53143534994066,
            "position": "absolute",
            "width": "100%",
          }
        }
      />
      <View
        alignItems="center"
        flexDirection="row"
        height={69.62752075919336}
        style={
          Array [
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "height": 69.62752075919336,
              "width": "100%",
            },
          ]
        }
        width="100%"
      >
        <View
          ml={57.69230769230769}
          style={
            Array [
              Object {
                "marginLeft": 57.69230769230769,
              },
            ]
          }
        >
          <View
            accessible={true}
            collapsable={false}
            focusable={true}
            h={39.56109134045077}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onHoverIn={[Function]}
            onHoverOut={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Array [
                Object {
                  "height": 39.56109134045077,
                  "width": 48.07692307692307,
                },
              ]
            }
            w={48.07692307692307}
          >
            <Image
              accessibilityLabel=" "
              alt=" "
              maxWidth="100%"
              onError={[Function]}
              resizeMode="contain"
              size="100%"
              source={
                Object {
                  "testUri": "../../../src/Assets/Image/icon_main_left_arrow.png",
                }
              }
              style={
                Array [
                  Object {
                    "height": "100%",
                    "maxWidth": "100%",
                    "width": "100%",
                  },
                ]
              }
            />
          </View>
        </View>
        <View
          style={
            Array [
              Object {},
            ]
          }
        />
        <View
          alignItems="center"
          display="flex"
          flex={1}
          justifyContent="center"
          style={
            Array [
              Object {
                "alignItems": "center",
                "display": "flex",
                "flexBasis": 0,
                "flexGrow": 1,
                "flexShrink": 1,
                "justifyContent": "center",
              },
            ]
          }
        >
          <View
            accessible={true}
            collapsable={false}
            focusable={true}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onHoverIn={[Function]}
            onHoverOut={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Array [
                Object {},
              ]
            }
          >
            <Text
              color="#1a1b1c"
              fontFamily="body"
              fontSize={33.80850587417971}
              fontStyle="normal"
              fontWeight={600}
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#1a1b1c",
                    "fontSize": 33.80850587417971,
                    "fontStyle": "normal",
                    "fontWeight": "600",
                    "textAlign": "center",
                  },
                ]
              }
              textAlign="center"
            >
              15초 영상챌린지
            </Text>
          </View>
        </View>
        <View
          style={
            Array [
              Object {},
            ]
          }
        />
        <View
          mr={57.69230769230769}
          style={
            Array [
              Object {
                "marginRight": 57.69230769230769,
              },
            ]
          }
        >
          <View
            accessible={true}
            collapsable={false}
            focusable={true}
            h={39.56109134045077}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onHoverIn={[Function]}
            onHoverOut={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Array [
                Object {
                  "height": 39.56109134045077,
                  "width": 48.07692307692307,
                },
              ]
            }
            w={48.07692307692307}
          >
            <Image
              accessibilityLabel=" "
              alt=" "
              maxWidth="100%"
              onError={[Function]}
              resizeMode="contain"
              size="100%"
              source={
                Object {
                  "testUri": "../../../src/Assets/Image/icon_home.png",
                }
              }
              style={
                Array [
                  Object {
                    "height": "100%",
                    "maxWidth": "100%",
                    "width": "100%",
                  },
                ]
              }
            />
          </View>
        </View>
      </View>
    </View>
    <View
      alignItems="center"
      display="flex"
      flex={1}
      justifyContent="center"
      style={
        Array [
          Object {
            "alignItems": "center",
            "display": "flex",
            "flexBasis": 0,
            "flexGrow": 1,
            "flexShrink": 1,
            "justifyContent": "center",
          },
        ]
      }
    >
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onHoverIn={[Function]}
        onHoverOut={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Array [
            Object {},
            Object {
              "backgroundColor": "#0fefbd",
              "borderColor": "#0fefbd",
              "borderRadius": 8,
              "borderWidth": 0,
              "height": 76.92307692307692,
              "shadowColor": "#8799a45b",
              "shadowOffset": Object {
                "height": 2,
                "width": 0,
              },
              "shadowOpacity": 1,
              "shadowRadius": 4,
              "width": 423.0769230769231,
            },
          ]
        }
      >
        <View
          alignItems="center"
          flex={1}
          flexDirection="row"
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexBasis": 0,
                "flexDirection": "row",
                "flexGrow": 1,
                "flexShrink": 1,
              },
            ]
          }
        >
          <View
            style={
              Array [
                Object {},
              ]
            }
          />
          <Text
            color="muted.700"
            flex={6}
            fontFamily="body"
            fontSize="md"
            fontStyle="normal"
            fontWeight={800}
            style={
              Array [
                Object {
                  "color": "#404040",
                  "flexBasis": 0,
                  "flexGrow": 6,
                  "flexShrink": 1,
                  "fontSize": 16,
                  "fontStyle": "normal",
                  "fontWeight": "800",
                  "textAlign": "center",
                },
                Object {
                  "color": "#fafafa",
                  "fontSize": 35.79724151383734,
                },
              ]
            }
            textAlign="center"
          >
            MY CHANLLENGE
          </Text>
        </View>
      </View>
      <RCTScrollView
        disableVirtualization={false}
        getItem={[Function]}
        getItemCount={[Function]}
        horizontal={false}
        initialNumToRender={10}
        keyExtractor={[Function]}
        maxToRenderPerBatch={10}
        mt={4}
        onContentSizeChange={[Function]}
        onEndReachedThreshold={1}
        onLayout={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        showsHorizontalScrollIndicator={false}
        showsVerticalScrollIndicator={false}
        stickyHeaderIndices={Array []}
        style={
          Array [
            Object {
              "marginTop": 16,
            },
          ]
        }
        updateCellsBatchingPeriod={50}
        viewabilityConfigCallbackPairs={Array []}
        windowSize={21}
      >
        <View />
      </RCTScrollView>
    </View>
    <View
      forwardedRef={[Function]}
      onMoveShouldSetResponder={[Function]}
      onMoveShouldSetResponderCapture={[Function]}
      onResponderEnd={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderReject={[Function]}
      onResponderRelease={[Function]}
      onResponderStart={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "bottom": -1334,
          "height": 1334,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "transform": Array [
            Object {
              "translateY": -0,
            },
          ],
        }
      }
    />
  </View>
</RNCSafeAreaProvider>
`;
